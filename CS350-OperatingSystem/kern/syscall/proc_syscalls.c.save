#include <types.h>
#include <kern/errno.h>
#include <kern/unistd.h>
#include <kern/wait.h>
#include <lib.h>
#include <syscall.h>
#include <current.h>
#include <proc.h>
#include <thread.h>
#include <addrspace.h>
#include <copyinout.h>
#include "opt-A2.h"
#include <synch.h>
#include <mips/trapframe.h>

  /* this implementation of sys__exit does not do anything with the exit code */
  /* this needs to be fixed to get exit() and waitpid() working properly */

void sys__exit(int exitcode) {

  struct addrspace *as;
  struct proc *p = curproc;
  /* for now, just include this to keep the compiler from complaining about
     an unused variable */

  #if OPT_A2
  p->p_exitcode = exitcode;
  p->p_exited = true;

  #else
  (void)exitcode;
  #endif

  DEBUG(DB_SYSCALL,"Syscall: _exit(%d)\n",exitcode);

  KASSERT(curproc->p_addrspace != NULL);
  as_deactivate();
  /*
   * clear p_addrspace before calling as_destroy. Otherwise if
   * as_destroy sleeps (which is quite possible) when we
   * come back we'll be calling as_activate on a
   * half-destroyed address space. This tends to be
   * messily fatal.
   */
  as = curproc_setas(NULL);
  as_destroy(as);

  /* detach this thread from its process */
  /* note: curproc cannot be used after this call */
  proc_remthread(curthread);

  /* if this is the last user process in the system, proc_destroy()
     will wake up the kernel menu thread */
  proc_destroy(p);
  
  thread_exit();
  /* thread_exit() does not return, so we should never get here */
  panic("return from thread_exit in sys_exit\n");
}




/* stub handler for getpid() system call                */
int
sys_getpid(pid_t *retval)
{
  /* for now, this is just a stub that always returns a PID of 1 */
  /* you need to fix this to make it work properly */
#if OPT_A2
	KASSERT(curproc!=NULL);
	*retval = curproc->pid;
#else
  *retval = 1;
#endif
  return(0);
}

/* stub handler for waitpid() system call                */

int
sys_waitpid(pid_t pid,
	    userptr_t status,
	    int options,
	    pid_t *retval)
{
  int exitstatus;
  int result;

  /* this is just a stub implementation that always reports an
     exit status of 0, regardless of the actual exit status of
     the specified process.   
     In fact, this will return 0 even if the specified process
     is still running, and even if it never existed in the first place.

     Fix this!
  */

  if (options != 0) {
    return(EINVAL);
  }
 

  #if OPT_A2

  pid_t curpid = curproc->pid; //pid of parent
  if(!pid_checkexists(pid)){ //no such process
	return ESRCH;
  }

  if(pid->p_parentPid != curpid){//no child process, not the children
	return ECHILD;
  }
  
  //If child process have not exited, parent must be blocked
  lock_acquire(pid->p_wait_lk);
  while(!pid->p_exited){
	cv_wait(pid->p_wait_cv, pid->p_wait_lk);
  }
  lock_release(pid_wait_lk);

  if(status == NULL){
	return EFAULT; //bad memory reference
  }

  exitstatus = _MKWAIT_EXIT(pid_getexitstatus(pid));

  #else
  /* for now, just pretend the exitstatus is 0 */
  exitstatus = 0;
  #endif


  result = copyout((void *)&exitstatus,status,sizeof(int));
  if (result) {
    return(result);
  }
  *retval = pid;
  return(0);
}




#if OPT_A2
void thread_fork_init(void * ptr, unsigned long val);
void thread_fork_init(void * ptr, unsigned long val){
  (void)val;
  enter_forked_process((struct trapframe *) ptr);
}

/*
Create a copy of the current process. Return 0 for the child process, and the PID of
the child process for the parent.
*/

int sys_fork(struct trapframe *tf, pid_t *retval){
	int result;

	//Create process structure for child process
	KASSERT(curproc!=NULL);

	struct proc *child = proc_create_runprogram(curproc->p_name);

	if(child == NULL){
		DEBUG(DB_SYSCALL, "sys_fork can't create child");
		return ENOMEM; //no more memory
	}

	//Create and copy address space
	
	spinlock_acquire(&child->p_lock);
	as_copy(curproc->p_addrspace,&child->p_addrspace);
	spinlock_release(&child->p_lock);
	
	if(child->p_addrspace == NULL){
		DEBUG(DB_SYSCALL, "sys_fork failed to create new address space");
		proc_destroy(child);
		return ENOMEM; //no more memoru for address space
	}
	
	struct trapframe *tf_child = kmalloc(sizeof(struct trapframe));
	if(tf_child == NULL){
		DEBUG(DB_SYSCALL,"sys_fork failed to create new trapframe space");
		proc_destroy(child);
		kfree(tf_child);
		return ENOMEM; //no more memory for trapframe
	}

	memcpy(tf_child,tf, sizeof(struct trapframe));

	//Assign PID to child process and create the parent/child relationship
	lock_acquire(curproc->p_wait_lk);
	child->p_parent = curproc;
	array_add(curproc->p_alive_child, child, NULL);
	lock_release(curproc->p_wait_lk);

	//Create thread for child process

	result = thread_fork(curthread->t_name, child, thread_fork_init, tf_child, 0);
	if(result){
		DEBUG(DB_SYSCALL,"sys_fork fail to fork thread");
		as_destroy(child->p_addrspace);
		proc_destroy(child);
		kfree(tf_child);
		return ENOMEM;
	}

	*retval = child->pid; //return value for parent
	return 0;
}
#endif
